        /// <summary>
        /// Gets or sets SubTitle containing this SubTitleFile
        /// </summary>
        public SubTitle SubTitle
        {
            get { return this.subTitles; }
            set { this.subTitles = value; }
        }

		
            this.subTitleFiles = new List<CSubTitleFile>();

        /// <summary>
        /// Gets or sets subTitleFiles part of this SubTitle
        /// </summary>
        public List<CSubTitleFile> SubTitleFiles
        {
            get { return this.subTitleFiles; }
            set { this.subTitleFiles = value; }
        }


            foreach (CSubTitleFile subTitleFiles in this.SubTitleFiles)
            {
                subTitleClone.SubTitleFiles.Add((CSubTitleFile)subTitleFiles.Clone());
            }

        /// <summary>
        /// sets filename for SubTitleFile suitable for Movies
        /// </summary>
        /// <param name="movie">Movie, the SubTilte is referring to</param>
        public virtual void SetFilename(Movie movie)
        {
            foreach (CSubTitleFile subTitleFile in this.SubTitleFiles)
            {
                subTitleFile.SetFilename(movie);
            }
        }

        /// <summary>
        /// sets filename for SubTitleFile suitable for Series
        /// </summary>
        /// <param name="series">Series, the SubTilte is referring to</param>
        public virtual void SetFilename(Series series)
        {
            foreach (CSubTitleFile subTitleFile in this.SubTitleFiles)
            {
                subTitleFile.SetFilename(series);
            }
        }

		
            foreach (CSubTitleFile subTitleFile in this.SubTitleFiles)
            {
                subTitleFile.WriteSubTitleStreamDataToLibrary(nfoStreamWriter);
            }



        /// <summary>
        /// adds Subtitle to Shell-Script
        /// </summary>
        /// <param name="swrSH">Bash-Shell-Script</param>
        public virtual void WriteSubTitleStreamDataToSH(StreamWriter swrSH)
        {
            foreach (CSubTitleFile subTitleFile in this.subTitleFiles)
            {
                subTitleFile.WriteSubTitleStreamDataToSH(swrSH);
            }
        }

		Epsiode.WriteToLibrary:

                // SubTitles
                foreach (SubTitle subTitle in this.SubTitles)
                {
                    subTitle.WriteSubTitleStreamDataToSH(swrSH);
                }


		/// <summary>
        /// sets filename for SubTitleFile suitable for Movies
        /// </summary>
        /// <param name="movie">Movie, the SubTilte is referring to</param>
        public void SetFilename(Movie movie)
        {
            this.MediaPath.Filename = movie.MediaPath.Filename + " part " + ("0000" + this.fileIndex.ToString()).Substring(this.fileIndex.ToString().Length) + this.Extension;
        }

        /// <summary>
        /// sets filename for SubTitleFile suitable for Series
        /// </summary>
        /// <param name="series">Series, the SubTilte is referring to</param>
        public void SetFilename(Series series)
        {
            this.MediaPath.Filename = series.MediaPath.Filename + " part " + ("0000" + this.fileIndex.ToString()).Substring(this.fileIndex.ToString().Length) + this.Extension;
        }


		/// <summary>
        /// checks XML-file from MovieCollector for SubTitles linked to the Video
        /// </summary>
        /// <param name="xMLMedia">XML-file from MovieCollector</param>
        /// <returns>List of assigned SubTitleFiles</returns>
        public virtual List<SubTitleFile> ReadSubTitleFile(XmlNode xMLMedia)
        {
            List<SubTitleFile> lstSubTitleFile = new List<SubTitleFile>();

            // Reading srt-SubTitles
            SrtSubTitle srtSrtSubTitle = new SrtSubTitle(this.Configuration);
            lstSubTitleFile.AddRange(srtSrtSubTitle.ReadSubTitleFile(xMLMedia));

            return new List<SubTitleFile>();
        }

		/// <inheritdoc/>
        public override List<SubTitleFile> ReadSubTitleFile(XmlNode xMLMedia)
        {
            List<SubTitleFile> lstSubTitleFiles = new List<SubTitleFile>();

            foreach (XmlNode xMLSubTitleStreamFile in xMLMedia.XMLReadSubnode("links").XMLReadSubnodes("link"))
            {
                // check all links for subtitle in language
                if ((xMLSubTitleStreamFile.XMLReadSubnode("urltype").XMLReadInnerText(string.Empty) == "Movie") && xMLSubTitleStreamFile.XMLReadSubnode("description").XMLReadInnerText(string.Empty).Contains("Untertitel." + this.Language + "."))
                {
                    // create new subtitle objects (generic Subtitle or SRT-Subtitle)
                    CSrtSubTitleFile srtSubTitleFile = new CSrtSubTitleFile(this.Configuration);

                    // name and filenames
                    srtSubTitleFile.Description = xMLSubTitleStreamFile.XMLReadSubnode("description").XMLReadInnerText(string.Empty);
                    srtSubTitleFile.UrlForMediaStorage = xMLSubTitleStreamFile.XMLReadSubnode("url").XMLReadInnerText(string.Empty);
                    srtSubTitleFile.ConvertFilename();

                    // check for fileIndex
                    int completeLength = srtSubTitleFile.Description.Length;
                    int subtitleLength = ("Untertitel." + this.Language + ".").Length;
                    int fileIndex = 1;

                    if (!int.TryParse(srtSubTitleFile.Description.Substring(subtitleLength, completeLength - subtitleLength).LeftOf("."), out fileIndex))
                    {
                        fileIndex = 1;
                    }

                    // subtitle file name and type
                    if (srtSubTitleFile.Extension.Contains(".srt"))
                    {
                        while (lstSubTitleFiles.Count < fileIndex)
                        {
                            lstSubTitleFiles.Add(null);
                        }

                        if (lstSubTitleFiles[fileIndex - 1] == null)
                        {
                            lstSubTitleFiles[fileIndex - 1] = new CSrtSubTitleFile(this.Configuration);
                        }

                        ((CSrtSubTitleFile)lstSubTitleFiles[fileIndex - 1]).ReadFromSubTitleFile(srtSubTitleFile, fileIndex);
                    }
                }
            }

            return lstSubTitleFiles;
        }

        /// <summary>
        /// sets filename for SubTitleFile suitable for Movies
        /// </summary>
        /// <param name="movie">Movie, the SubTilte is referring to</param>
        public override void SetFilename(Movie movie)
        {
            base.SetFilename(movie);
        }

        /// <summary>
        /// sets filename for SubTitleFile suitable for Series
        /// </summary>
        /// <param name="series">Series, the SubTilte is referring to</param>
        public override void SetFilename(Series series)
        {
            base.SetFilename(series);
        }

		
        
        /// <summary>
        /// Writes subtitle data to provided NFO file
        /// </summary>
        /// <param name="nfoStreamWriter">NFO file that the stream information should be added to</param>
        /// <remarks>If video contains SRT-subtitles, the SRT-files are created as well</remarks>
        public override void WriteSubTitleStreamDataToLibrary(StreamWriter nfoStreamWriter)
        {
            base.WriteSubTitleStreamDataToLibrary(nfoStreamWriter);
        }

        /// <summary>
        /// adds Subtitle to Shell-Script
        /// </summary>
        /// <param name="swrSH">Bash-Shell-Script</param>
        public override void WriteSubTitleStreamDataToSH(StreamWriter swrSH)
        {
            base.WriteSubTitleStreamDataToSH(swrSH);
        }



		/// <summary>
        /// writes subtitle to SH
        /// </summary>
        /// <param name="swrSH">StreamWriter used to write script to</param>
        public override void WriteSubTitleStreamDataToSH(StreamWriter swrSH)
        {
            if (this.MediaPath.Filename != string.Empty)
            {
                swrSH.WriteLine("/bin/cp \"/share/XBMC/SHIRYOUSOOCHI/Programme/Collectorz.com/nfo-Konverter/nfoConverter/nfoConverter/bin/" + this.MediaPath.Filename + "\" \"" + this.MediaPath.Filename + "\"");
            }
        }






		
        //    List<Series> lstSeriesCollection = new List<Series>();
        //    List<Series> lstSeriesCollectionPerMediaGroup = new List<Series>();
        //    List<Series> lstSeriesCollectionWithoutMediaGroup = new List<Series>();

        //    Series serSeriesPerMediaGroup = new Series(this.Configuration);
        //    Episode epiEpisodePerMediaGroup = new Episode(this.Configuration);
        //    string strActiveMediaGroup = string.Empty;
        //    int intSeasonOffset = 0;
        //    int intDisplaySeasonOffset = 0;
        //    int intEpisodeOffset = 0;
        //    int intSpecialsOffset = 0;
        //    int intDisplayEpisodeOffset = 0;
        //    int numberOfSeriesInSeriesPerMediaGroup = 0;

        //    lstSeriesCollection = this.ClonePerLanguage(this.SeriesCollection);

        //    // create new List of Series with MediaGroup name
        //    foreach (Series serSeries in lstSeriesCollection.OrderBy(o => o.MediaGroup).ThenBy(o => o.TitleSort).ToList())
        //    {
        //        lstSeriesCollectionWithoutMediaGroup.Add(serSeries);

        //        // create new Series, when a different MediaGroup is present
        //        if (serSeries.MediaGroup != strActiveMediaGroup)
        //        {
        //            numberOfSeriesInSeriesPerMediaGroup = 1;
        //            serSeriesPerMediaGroup = (Series)serSeries.Clone();
        //            strActiveMediaGroup = serSeries.MediaGroup;
        //            intSeasonOffset = 0;
        //            intDisplaySeasonOffset = 0;
        //            intEpisodeOffset = 0;
        //            intSpecialsOffset = 0;
        //            intDisplayEpisodeOffset = 0;

        //            lstSeriesCollectionPerMediaGroup.Add(serSeriesPerMediaGroup);
        //        }
        //        else
        //        {
        //            #region adjust plot, actors, cast and images for series
        //            bool personExistsInSeriesPerMediaGroup = false;

        //            if (numberOfSeriesInSeriesPerMediaGroup == 1)
        //            {
        //                List<Actor> serSeriesPerMediaGroupExtendedActors = new List<Actor>();
        //                List<Person> serSeriesPerMediaGroupExtendedDirectors = new List<Person>();
        //                List<Person> serSeriesPerMediaGroupExtendedWriters = new List<Person>();

        //                foreach (Actor actor in serSeriesPerMediaGroup.Actors)
        //                {
        //                    serSeriesPerMediaGroupExtendedActors.Add(actor);
        //                }

        //                foreach (Person director in serSeriesPerMediaGroup.Directors)
        //                {
        //                    serSeriesPerMediaGroupExtendedDirectors.Add(director);
        //                }

        //                foreach (Person writer in serSeriesPerMediaGroup.Writers)
        //                {
        //                    serSeriesPerMediaGroupExtendedWriters.Add(writer);
        //                }

        //                foreach (Episode epiEpisode in serSeriesPerMediaGroup.Episodes)
        //                {
        //                    // set series plot for empty one in episode (used mainly for movies)
        //                    if (!epiEpisode.IsSpecial && epiEpisode.Content == string.Empty)
        //                    {
        //                        epiEpisode.Content = serSeriesPerMediaGroup.Content;
        //                    }

        //                    // adds actors to Episodes
        //                    foreach (Actor actorInSeriesPerMediaGroup in serSeriesPerMediaGroup.Actors)
        //                    {
        //                        foreach (Actor actorInEpisode in epiEpisode.Actors)
        //                        {
        //                            if (actorInSeriesPerMediaGroup.Name == actorInEpisode.Name)
        //                            {
        //                                personExistsInSeriesPerMediaGroup = true;
        //                            }
        //                        }

        //                        if (!personExistsInSeriesPerMediaGroup)
        //                        {
        //                            serSeriesPerMediaGroupExtendedActors.Add(actorInSeriesPerMediaGroup);
        //                        }
        //                    }

        //                    // adds directors to Episodes
        //                    foreach (Person directorInSeriesPerMediaGroup in serSeriesPerMediaGroup.Directors)
        //                    {
        //                        foreach (Person directorInEpisode in epiEpisode.Directors)
        //                        {
        //                            if (directorInSeriesPerMediaGroup.Name == directorInEpisode.Name)
        //                            {
        //                                personExistsInSeriesPerMediaGroup = true;
        //                            }
        //                        }

        //                        if (!personExistsInSeriesPerMediaGroup)
        //                        {
        //                            serSeriesPerMediaGroupExtendedDirectors.Add(directorInSeriesPerMediaGroup);
        //                        }
        //                    }

        //                    // adds writers to Episodes
        //                    foreach (Person writerInSeriesPerMediaGroup in serSeriesPerMediaGroup.Writers)
        //                    {
        //                        foreach (Person writerInEpisode in epiEpisode.Writers)
        //                        {
        //                            if (writerInSeriesPerMediaGroup.Name == writerInEpisode.Name)
        //                            {
        //                                personExistsInSeriesPerMediaGroup = true;
        //                            }
        //                        }

        //                        if (!personExistsInSeriesPerMediaGroup)
        //                        {
        //                            serSeriesPerMediaGroupExtendedWriters.Add(writerInSeriesPerMediaGroup);
        //                        }
        //                    }

        //                    serSeriesPerMediaGroup.Actors = serSeriesPerMediaGroupExtendedActors;
        //                    serSeriesPerMediaGroup.Directors = serSeriesPerMediaGroupExtendedDirectors;
        //                    serSeriesPerMediaGroup.Writers = serSeriesPerMediaGroupExtendedWriters;
        //                }

        //                // set season-images
        //                bool serSeriesPerMediaGroupContainsSeasonCover = false;
        //                bool serSeriesPerMediaGroupContainsSeasonPoster = false;

        //                // determine, if images need to be added (mainly for movies)
        //                foreach (ImageFile imgImageFile in serSeriesPerMediaGroup.Images)
        //                {
        //                    if (imgImageFile.ImageType == Configuration.ImageType.SeasonCover)
        //                    {
        //                        serSeriesPerMediaGroupContainsSeasonCover = true;
        //                    }

        //                    if (imgImageFile.ImageType == Configuration.ImageType.SeasonPoster)
        //                    {
        //                        serSeriesPerMediaGroupContainsSeasonPoster = true;
        //                    }
        //                }

        //                // adding images if necessary
        //                foreach (ImageFile imgImageFile in serSeriesPerMediaGroup.Images)
        //                {
        //                    ImageFile imageFileClone = (ImageFile)imgImageFile.Clone();
        //                    imageFileClone.Season = "1";

        //                    if (!serSeriesPerMediaGroupContainsSeasonCover && imgImageFile.ImageType == Configuration.ImageType.SeasonCover)
        //                    {
        //                        imageFileClone.ImageType = Configuration.ImageType.SeasonCover;
        //                    }

        //                    if (!serSeriesPerMediaGroupContainsSeasonPoster && imgImageFile.ImageType == Configuration.ImageType.SeasonPoster)
        //                    {
        //                        imageFileClone.ImageType = Configuration.ImageType.SeasonCover;
        //                    }

        //                    if (serSeriesPerMediaGroupContainsSeasonCover || serSeriesPerMediaGroupContainsSeasonPoster)
        //                    {
        //                        serSeriesPerMediaGroup.Images.Add(imageFileClone);
        //                    }
        //                }
        //            }
        //            #endregion

        //            serSeriesPerMediaGroup.Title = serSeriesPerMediaGroup.MediaGroup;
        //            intSeasonOffset = serSeriesPerMediaGroup.NumberOfEpisodesPerSeason.Count - 1;
        //            intDisplaySeasonOffset = serSeriesPerMediaGroup.NumberOfEpisodesPerSeason.Count - 1;
        //            intEpisodeOffset = serSeriesPerMediaGroup.NumberOfEpisodes;
        //            intSpecialsOffset = serSeriesPerMediaGroup.NumberOfSpecials;
        //            intDisplayEpisodeOffset = serSeriesPerMediaGroup.Episodes.Count;

        //            #region episode related settings
        //            foreach (Episode epiEpisode in serSeries.Episodes)
        //            {
        //                // create new Episode and set reference to series
        //                epiEpisodePerMediaGroup = (Episode)epiEpisode.Clone();
        //                epiEpisodePerMediaGroup.Series = serSeriesPerMediaGroup;

        //                // set DisplaySeason, DisplayEpisode and Season for new Episode
        //                epiEpisodePerMediaGroup.DisplaySeason = (int.Parse(epiEpisodePerMediaGroup.DisplaySeason) + intDisplaySeasonOffset).ToString();
        //                epiEpisodePerMediaGroup.DisplayEpisode = (int.Parse(epiEpisodePerMediaGroup.DisplayEpisode) + intDisplayEpisodeOffset).ToString();
        //                epiEpisodePerMediaGroup.ActualSeason = epiEpisodePerMediaGroup.ActualSeason == "0" /* Special */ ? "0" : (int.Parse(epiEpisodePerMediaGroup.ActualSeason) + intSeasonOffset).ToString();

        //                // add new Season to NumberOfEpisodesPerSeason if necessary
        //                int intSeason = int.Parse(epiEpisodePerMediaGroup.ActualSeason);
        //                while (serSeriesPerMediaGroup.NumberOfEpisodesPerSeason.Count < intSeason + 1)
        //                {
        //                    serSeriesPerMediaGroup.NumberOfEpisodesPerSeason.Add(0);
        //                }

        //                // set new Numbers per Series
        //                serSeriesPerMediaGroup.NumberOfEpisodes = serSeriesPerMediaGroup.NumberOfEpisodes + (!epiEpisodePerMediaGroup.IsSpecial ? 1 : 0);
        //                serSeriesPerMediaGroup.NumberOfSpecials = serSeriesPerMediaGroup.NumberOfSpecials + (epiEpisodePerMediaGroup.IsSpecial ? 1 : 0);
        //                serSeriesPerMediaGroup.NumberOfEpisodesPerSeason[intSeason] = serSeriesPerMediaGroup.NumberOfEpisodesPerSeason[intSeason] + 1;
        //                serSeriesPerMediaGroup.NumberOfTotalEpisodes = serSeriesPerMediaGroup.NumberOfTotalEpisodes + 1;

        //                // set Episode-Number accordingly
        //                epiEpisodePerMediaGroup.ActualEpisode = serSeriesPerMediaGroup.NumberOfEpisodesPerSeason[intSeason].ToString();

        //                // add Server for serSeriesPerMediaGroup
        //                serSeriesPerMediaGroup.AddServer(epiEpisode.Server);

        //                // TODO: add actors
        //                // TODO: add directors
        //                // TODO: add writers

        //                // set VideoIndex and FileIndex for Episode and associated Files
        //                epiEpisodePerMediaGroup.VideoIndex = epiEpisodePerMediaGroup.VideoIndex + intDisplayEpisodeOffset;
        //                foreach (VideoFile videoFile in epiEpisodePerMediaGroup.MediaFiles)
        //                {
        //                    videoFile.FileIndex = videoFile.FileIndex + intDisplayEpisodeOffset;

        //                    foreach (SubTitleFile subTitleFile in videoFile.SubTitleFiles)
        //                    {
        //                        subTitleFile.FileIndex = subTitleFile.FileIndex + intDisplayEpisodeOffset;
        //                    }
        //                }

        //                // add episode to new series
        //                serSeriesPerMediaGroup.Episodes.Add(epiEpisodePerMediaGroup);

        //                #region series related settings

        //                // must be done here, as actual season depends on episodes added

        //                // set season-images
        //                bool serSeriesPerMediaGroupContainsSeasonCoverForActualSeason = false;
        //                bool serSeriesPerMediaGroupContainsSeasonPosterForActualSeason = false;

        //                // determine, if images need to be added (mainly for movies)
        //                foreach (ImageFile imgImageFile in serSeriesPerMediaGroup.Images)
        //                {
        //                    if (imgImageFile.ImageType == Configuration.ImageType.SeasonCover && (int.Parse(imgImageFile.Season) + intSeasonOffset).ToString() == epiEpisodePerMediaGroup.ActualSeason)
        //                    {
        //                        serSeriesPerMediaGroupContainsSeasonCoverForActualSeason = true;
        //                    }

        //                    if (imgImageFile.ImageType == Configuration.ImageType.SeasonPoster && (int.Parse(imgImageFile.Season) + intSeasonOffset).ToString() == epiEpisodePerMediaGroup.ActualSeason)
        //                    {
        //                        serSeriesPerMediaGroupContainsSeasonPosterForActualSeason = true;
        //                    }
        //                }

        //                // adding images if necessary
        //                foreach (ImageFile imgImageFile in serSeriesPerMediaGroup.Images)
        //                {
        //                    ImageFile imageFileClone = (ImageFile)imgImageFile.Clone();
        //                    imageFileClone.Season = epiEpisodePerMediaGroup.ActualSeason;

        //                    if (!serSeriesPerMediaGroupContainsSeasonCoverForActualSeason && imgImageFile.ImageType == Configuration.ImageType.SeasonCover && (int.Parse(imgImageFile.Season) + intSeasonOffset).ToString() == epiEpisodePerMediaGroup.ActualSeason)
        //                    {
        //                        imageFileClone.ImageType = Configuration.ImageType.SeasonCover;
        //                    }

        //                    if (!serSeriesPerMediaGroupContainsSeasonCoverForActualSeason && imgImageFile.ImageType == Configuration.ImageType.SeasonPoster && (int.Parse(imgImageFile.Season) + intSeasonOffset).ToString() == epiEpisodePerMediaGroup.ActualSeason)
        //                    {
        //                        imageFileClone.ImageType = Configuration.ImageType.SeasonCover;
        //                    }

        //                    if (serSeriesPerMediaGroupContainsSeasonCoverForActualSeason || serSeriesPerMediaGroupContainsSeasonPosterForActualSeason)
        //                    {
        //                        serSeriesPerMediaGroup.Images.Add(imageFileClone);
        //                    }
        //                }
        //            }
        //            #endregion

        //            serSeriesPerMediaGroup.SetFilename();
        //        }
        //        #endregion
        //    }

        //    this.SeriesCollectionGroupedByMediaGroup = lstSeriesCollectionPerMediaGroup;
        //    this.SeriesCollectionWithoutMediaGroup = lstSeriesCollectionWithoutMediaGroup;
        //}